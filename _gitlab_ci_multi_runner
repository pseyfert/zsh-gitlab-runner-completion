#compdef gitlab-ci-multi-runner gitlab-runner

(( $+functions[_gitlab_ci_multi_runner_command] )) || _gitlab_ci_multi_runner_command()
{
  local -a _gitlab_ci_multi_runner_cmds

  _gitlab_ci_multi_runner_cmds=(
  "exec:execute a build locally"
  "list:List all configured runners"
  "run:run multi runner service"
  "register:register a new runner"
  "install:install service"
  "uninstall:uninstall service"
  "start:start service"
  "stop:stop service"
  "restart:restart service"
  "status:get status of a service"
  "run-single:start single runner"
  "unregister:unregister specific runner"
  "verify:verify all registered runners"
  "artifacts-downloader:download and extract build artifacts (internal)"
  "artifacts-uploader:create and upload build artifacts (internal)"
  "cache-archiver:create and upload cache artifacts (internal)"
  "cache-extractor: download and extract cache artifacts (internal)"
  "help:Shows a list of commands or help for one command"
  "h:Shows a list of commands or help for one command"
  )
  if (( CURRENT == 1 ));then
    _describe -t commands 'gitlab-ci-multi-runner command' _gitlab_ci_multi_runner_cmds
  else
    cmd="${${_gitlab_ci_multi_runner_cmds[(r)$words[1]:*]%%:*}}"
    if [[ "$cmd" == "help" || "$cmd" == "h" ]]; then
      if (( CURRENT == 2 )); then
        _describe -t commands 'gitlab-ci-multi-runner commands' _gitlab_ci_multi_runner_cmds
      fi
    else
      _call_function ret _gitlab_ci_multi_runner_$cmd
    fi
  fi
}

_gitlab_ci_multi_runner_log() {
  local expl
  _wanted arguments expl 'gitlab runner log level' compadd debug info warn error fatal panic
}

_gitlab_ci_multi_runner() {
  local curcontext="$curcontext" state lstate line

  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '(- *)'{--version,-v}'[print the version]' \
    {--log-level,-l}'[log level, default="info"]:log level:_gitlab_ci_multi_runner_log' \
    '--debug[debug mode \[$DEBUG\]]' \
    '--cpuprofile[cpu profile to file \[$CPU_PROFILE\]]' \
    '*::gitlab-ci-multi-runner command:_gitlab_ci_multi_runner_command'
}

_gitlab_ci_multi_runner_exec() { 
  local -a cmds
  cmds=(
  "ssh:use ssh executor"
  "virtualbox:use virtualbox executor"
  "docker:use docker executor"
  "docker-ssh:use docker-ssh executor"
  "parallels:use parallels executor"
  "shell:use shell executor"
  "help:Shows a list of commands or help for one command"
  "h:Shows a list of commands or help for one command"
  )
  if (( CURRENT == 2 )); then
    _describe -t commands 'gitlab-ci-multi-runner exec command' _cmds
  fi
  _arguments -s '(- *)'{-h,--help}'[show help]'
}

_gitlab_ci_multi_runner_list() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '(-c --config)'{-c,--config}'[config file \[$CONFIG_FILE\]]:config file:_path_files -g "*(/) *.toml"'
}

_gitlab_ci_multi_runner_run() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '(-c --config)'{-c,--config}'[config file \[$CONFIG_FILE\]]:config file:_path_files -g "*(/) *.toml"' \
    '--metrics-server[Metrics server listening address \[$METRICS_SERVER\]]' \
    {-n,--service}'[Use different names for different services, default="gitlab-runner"]' \
    {-d,--working-directory}'[Specify custom working directory]' \
    {-u,--user}'[Use specific user to execute shell scripts]' \
    '--syslog[Log to syslog]'
}

_gitlab_ci_multi_runner_register() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '(-c --config)'{-c,--config}'[config file \[$CONFIG_FILE\]]:config file:_path_files -g "*(/) *.toml"' \
    '--tag-list[Tag list \[$RUNNER_TAG_LIST\]]' \
    '(-n --non-interactive)'{-n,--non-interactive}'[Run registration unattended \[$REGISTER_NON_INTERACTIVE\]]' \
    '--leave-runner[Don''''t remove runner if registration fails \[$REGISTER_LEAVE_RUNNER\]]' \
    '(-r --registration-token)'{-r,--registration-token}'[Runner''''s registration token \[$REGISTRATION_TOKEN\]]' \
    '(--name --description)'{--name,--description}'[Runner name \[$RUNNER_NAME\]]' \
    '--limit[Maximum number of builds processed by this runner \[$RUNNER_LIMIT\]]' \
    '--output-limit[Maximum build trace size in kilobytes \[$RUNNER_OUTPUT_LIMIT\]]' \
    '(-u --url)'{-u,--url}'[Runner URL \[$CI_SERVER_URL\]]' \
    '(-t --token)'{-t,--token}'[Runner token \[$CI_SERVER_TOKEN\]]' \
    '--tls-ca-file[File containing the certificates to verify the peer when using HTTPS \[$CI_SERVER_TLS_CA_FILE\]]:certificate file:_files' \
    '--executor[Select executor, eg. shell, docker, etc. \[$RUNNER_EXECUTOR\]]' \
    '--builds-dir[Directory where builds are stored \[$RUNNER_BUILDS_DIR\]]:build directory:_directories' \
    '--cache-dir[Directory where build cache is stored \[$RUNNER_CACHE_DIR\]]:cache directory:_directories' \
    '--env[Custom environment variables injected to build environment \[$RUNNER_ENV\]]' \
    '--pre-clone-script[Runner-specific command script executed before code is pulled \[$RUNNER_PRE_CLONE_SCRIPT\]]' \
    '--pre-build-script[Runner-specific command script executed after code is pulled, just before build executes \[$RUNNER_PRE_BUILD_SCRIPT\]]' \
    '--shell[Select bash, cmd or powershell \[$RUNNER_SHELL\]]' \
    '--ssh-user[User name \[$SSH_USER\]]' \
    '--ssh-password[User password \[$SSH_PASSWORD\]]' \
    '--ssh-host[Remote host \[$SSH_HOST\]]' \
    '--ssh-port[Remote host port \[$SSH_PORT\]]' \
    '--ssh-identity-file[Identity file to be used \[$SSH_IDENTITY_FILE\]]:ssh identity file:_files' \
    '--docker-host[Docker daemon address \[$DOCKER_HOST\]]' \
    '--docker-cert-path[Certificate path \[$DOCKER_CERT_PATH\]]:certificate path:_directories' \
    '--docker-tlsverify[Use TLS and verify the remote \[$DOCKER_TLS_VERIFY\]]' \
    '--docker-hostname[Custom container hostname \[$DOCKER_HOSTNAME\]]' \
    '--docker-image[Docker image to be used \[$DOCKER_IMAGE\]]' \
    '--docker-cpuset-cpus[String value containing the cgroups CpusetCpus to use \[$DOCKER_CPUSET_CPUS\]]' \
    '--docker-dns[A list of DNS servers for the container to use \[$DOCKER_DNS\]]' \
    '--docker-dns-search[A list of DNS search domains \[$DOCKER_DNS_SEARCH\]]' \
    '--docker-privileged[Give extended privileges to container \[$DOCKER_PRIVILEGED\]]' \
    '--docker-cap-add[Add Linux capabilities \[$DOCKER_CAP_ADD\]]' \
    '--docker-cap-drop[Drop Linux capabilities \[$DOCKER_CAP_DROP\]]' \
    '--docker-security-opt[Security Options \[$DOCKER_SECURITY_OPT\]]' \
    '--docker-devices[Add a host device to the container \[$DOCKER_DEVICES\]]' \
    '--docker-disable-cache[Disable all container caching \[$DOCKER_DISABLE_CACHE\]]' \
    '--docker-volumes[Bind mount a volumes \[$DOCKER_VOLUMES\]]' \
    '--docker-cache-dir[Directory where to store caches \[$DOCKER_CACHE_DIR\]]:cache directory:_directories' \
    '--docker-extra-hosts[Add a custom host-to-IP mapping \[$DOCKER_EXTRA_HOSTS\]]' \
    '--docker-volumes-from[A list of volumes to inherit from another container \[$DOCKER_VOLUMES_FROM\]]' \
    '--docker-network-mode[Add container to a custom network \[$DOCKER_NETWORK_MODE\]]' \
    '--docker-links[Add link to another container \[$DOCKER_LINKS\]]' \
    '--docker-services[Add service that is started with container \[$DOCKER_SERVICES\]]' \
    '--docker-wait-for-services-timeout[How long to wait for service startup \[$DOCKER_WAIT_FOR_SERVICES_TIMEOUT\]]' \
    '--docker-allowed-images[Whitelist allowed images \[$DOCKER_ALLOWED_IMAGES\]]' \
    '--docker-allowed-services[Whitelist allowed services \[$DOCKER_ALLOWED_SERVICES\]]' \
    '--docker-pull-policy[Image pull policy: never, if-not-present, always \[$DOCKER_PULL_POLICY\]]' \
    '--parallels-base-name[VM name to be used \[$PARALLELS_BASE_NAME\]]' \
    '--parallels-template-name[VM template to be created \[$PARALLELS_TEMPLATE_NAME\]]' \
    '--parallels-disable-snapshots[Disable snapshoting to speedup VM creation \[$PARALLELS_DISABLE_SNAPSHOTS\]]' \
    '--virtualbox-base-name[VM name to be used \[$VIRTUALBOX_BASE_NAME\]]' \
    '--virtualbox-base-snapshot[Name or UUID of a specific VM snapshot to clone \[$VIRTUALBOX_BASE_SNAPSHOT\]]' \
    '--virtualbox-disable-snapshots[Disable snapshoting to speedup VM creation \[$VIRTUALBOX_DISABLE_SNAPSHOTS\]]' \
    '--cache-type[Select caching method: s3, to use S3 buckets \[$CACHE_TYPE\]]' \
    '--cache-s3-server-address[A host:port to the used S3-compatible server \[$S3_SERVER_ADDRESS\]]' \
    '--cache-s3-access-key[S3 Access Key \[$S3_ACCESS_KEY\]]' \
    '--cache-s3-secret-key[S3 Secret Key \[$S3_SECRET_KEY\]]' \
    '--cache-s3-bucket-name[Name of the bucket where cache will be stored \[$S3_BUCKET_NAME\]]' \
    '--cache-s3-bucket-location[Name of S3 region \[$S3_BUCKET_LOCATION\]]' \
    '--cache-s3-insecure[Use insecure mode (without https) \[$S3_CACHE_INSECURE\]]' \
    '--machine-idle-nodes[Maximum idle machines \[$MACHINE_IDLE_COUNT\]]' \
    '--machine-idle-time[Minimum time after node can be destroyed \[$MACHINE_IDLE_TIME\]]' \
    '--machine-max-builds[Maximum number of builds processed by machine \[$MACHINE_MAX_BUILDS\]]' \
    '--machine-machine-driver[The driver to use when creating machine \[$MACHINE_DRIVER\]]' \
    '--machine-machine-name[The template for machine name (needs to include %s) \[$MACHINE_NAME\]]' \
    '--machine-machine-options[Additional machine creation options \[$MACHINE_OPTIONS\]]' \
    '--machine-off-peak-periods[Time periods when the scheduler is in the OffPeak mode \[$MACHINE_OFF_PEAK_PERIODS\]]' \
    '--machine-off-peak-idle-count[Maximum idle machines when the scheduler is in the OffPeak mode \[$MACHINE_OFF_PEAK_IDLE_COUNT\]]' \
    '--machine-off-peak-idle-time[Minimum time after machine can be destroyed when the scheduler is in the OffPeak mode \[$MACHINE_OFF_PEAK_IDLE_TIME\]]' \
    '--kubernetes-host[Optional Kubernetes master host URL (auto-discovery attempted if not specified) \[$KUBERNETES_HOST\]]' \
    '--kubernetes-cert-file[Optional Kubernetes master auth certificate \[$KUBERNETES_CERT_FILE\]]:certificate file:_files' \
    '--kubernetes-key-file[Optional Kubernetes master auth private key \[$KUBERNETES_KEY_FILE\]]:key file:_files' \
    '--kubernetes-ca-file[Optional Kubernetes master auth ca certificate \[$KUBERNETES_CA_FILE\]]:ca certificate file:_files' \
    '--kubernetes-image[Default docker image to use for builds when none is specified \[$KUBERNETES_IMAGE\]]' \
    '--kubernetes-namespace[Namespace to run Kubernetes jobs in \[$KUBERNETES_NAMESPACE\]]' \
    '--kubernetes-privileged[Run all containers with the privileged flag enabled \[$KUBERNETES_PRIVILEGED\]]' \
    '--kubernetes-cpus[The CPU allocation given to build containers \[$KUBERNETES_CPUS\]]' \
    '--kubernetes-memory[The amount of memory allocated to build containers \[$KUBERNETES_MEMORY\]]' \
    '--kubernetes-service-cpus[The CPU allocation given to build service containers \[$KUBERNETES_SERVICE_CPUS\]]' \
    '--kubernetes-service-memory[The amount of memory allocated to build service containers \[$KUBERNETES_SERVICE_MEMORY\]]' \
    '--kubernetes-pull-policy[Policy for if/when to pull a container image (never, if-not-present, always). The cluster default will be used if not set \[$KUBERNETES_PULL_POLICY\]]'
}

_gitlab_ci_multi_runner_install() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '(-c --config)'{-c,--config}'[config file \[$CONFIG_FILE\]]:config file:_path_files -g "*(/) *.toml"' \
    '(--service -n)'{-n,--service}'[Specify service name to use]' \
    '(--working-directory -d)'{-d,--working-directory}'[Specify custom root directory where all data are stored]:root directory:_directories'
}

_gitlab_ci_multi_runner_uninstall() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '(--service -n)'{-n,--service}'[Specify service name to use]'
}

_gitlab_ci_multi_runner_start() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '(--service -n)'{-n,--service}'[Specify service name to use]'
}

_gitlab_ci_multi_runner_stop() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '(--service -n)'{-n,--service}'[Specify service name to use]'
}

_gitlab_ci_multi_runner_restart() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '(--service -n)'{-n,--service}'[Specify service name to use]'
}

_gitlab_ci_multi_runner_status() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '(--service -n)'{-n,--service}'[Specify service name to use]'
}

_gitlab_ci_multi_runner_run-single() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '(--name --description)'{--name,--description}'[Runner name \[$RUNNER_NAME\]]' \
    '--limit[Maximum number of builds processed by this runner \[$RUNNER_LIMIT\]]' \
    '--output-limit[Maximum build trace size in kilobytes \[$RUNNER_OUTPUT_LIMIT\]]' \
    '(-u --url)'{-u,--url}'[Runner URL \[$CI_SERVER_URL\]]' \
    '(-t --token)'{-t,--token}'[Runner token \[$CI_SERVER_TOKEN\]]' \
    '--tls-ca-file[File containing the certificates to verify the peer when using HTTPS \[$CI_SERVER_TLS_CA_FILE\]]:certificate file:_files' \
    '--executor[Select executor, eg. shell, docker, etc. \[$RUNNER_EXECUTOR\]]' \
    '--builds-dir[Directory where builds are stored \[$RUNNER_BUILDS_DIR\]]:build directory:_directories' \
    '--cache-dir[Directory where build cache is stored \[$RUNNER_CACHE_DIR\]]:cache directory:_directories' \
    '--env[Custom environment variables injected to build environment \[$RUNNER_ENV\]]' \
    '--pre-clone-script[Runner-specific command script executed before code is pulled \[$RUNNER_PRE_CLONE_SCRIPT\]]' \
    '--pre-build-script[Runner-specific command script executed after code is pulled, just before build executes \[$RUNNER_PRE_BUILD_SCRIPT\]]' \
    '--shell[Select bash, cmd or powershell \[$RUNNER_SHELL\]]' \
    '--ssh-user[User name \[$SSH_USER\]]' \
    '--ssh-password[User password \[$SSH_PASSWORD\]]' \
    '--ssh-host[Remote host \[$SSH_HOST\]]' \
    '--ssh-port[Remote host port \[$SSH_PORT\]]' \
    '--ssh-identity-file[Identity file to be used \[$SSH_IDENTITY_FILE\]]:ssh identity file:_files' \
    '--docker-host[Docker daemon address \[$DOCKER_HOST\]]' \
    '--docker-cert-path[Certificate path \[$DOCKER_CERT_PATH\]]:certificate path:_directories' \
    '--docker-tlsverify[Use TLS and verify the remote \[$DOCKER_TLS_VERIFY\]]' \
    '--docker-hostname[Custom container hostname \[$DOCKER_HOSTNAME\]]' \
    '--docker-image[Docker image to be used \[$DOCKER_IMAGE\]]' \
    '--docker-cpuset-cpus[String value containing the cgroups CpusetCpus to use \[$DOCKER_CPUSET_CPUS\]]' \
    '--docker-dns[A list of DNS servers for the container to use \[$DOCKER_DNS\]]' \
    '--docker-dns-search[A list of DNS search domains \[$DOCKER_DNS_SEARCH\]]' \
    '--docker-privileged[Give extended privileges to container \[$DOCKER_PRIVILEGED\]]' \
    '--docker-cap-add[Add Linux capabilities \[$DOCKER_CAP_ADD\]]' \
    '--docker-cap-drop[Drop Linux capabilities \[$DOCKER_CAP_DROP\]]' \
    '--docker-security-opt[Security Options \[$DOCKER_SECURITY_OPT\]]' \
    '--docker-devices[Add a host device to the container \[$DOCKER_DEVICES\]]' \
    '--docker-disable-cache[Disable all container caching \[$DOCKER_DISABLE_CACHE\]]' \
    '--docker-volumes[Bind mount a volumes \[$DOCKER_VOLUMES\]]' \
    '--docker-cache-dir[Directory where to store caches \[$DOCKER_CACHE_DIR\]]:cache directory:_directories' \
    '--docker-extra-hosts[Add a custom host-to-IP mapping \[$DOCKER_EXTRA_HOSTS\]]' \
    '--docker-volumes-from[A list of volumes to inherit from another container \[$DOCKER_VOLUMES_FROM\]]' \
    '--docker-network-mode[Add container to a custom network \[$DOCKER_NETWORK_MODE\]]' \
    '--docker-links[Add link to another container \[$DOCKER_LINKS\]]' \
    '--docker-services[Add service that is started with container \[$DOCKER_SERVICES\]]' \
    '--docker-wait-for-services-timeout[How long to wait for service startup \[$DOCKER_WAIT_FOR_SERVICES_TIMEOUT\]]' \
    '--docker-allowed-images[Whitelist allowed images \[$DOCKER_ALLOWED_IMAGES\]]' \
    '--docker-allowed-services[Whitelist allowed services \[$DOCKER_ALLOWED_SERVICES\]]' \
    '--docker-pull-policy[Image pull policy: never, if-not-present, always \[$DOCKER_PULL_POLICY\]]' \
    '--parallels-base-name[VM name to be used \[$PARALLELS_BASE_NAME\]]' \
    '--parallels-template-name[VM template to be created \[$PARALLELS_TEMPLATE_NAME\]]' \
    '--parallels-disable-snapshots[Disable snapshoting to speedup VM creation \[$PARALLELS_DISABLE_SNAPSHOTS\]]' \
    '--virtualbox-base-name[VM name to be used \[$VIRTUALBOX_BASE_NAME\]]' \
    '--virtualbox-base-snapshot[Name or UUID of a specific VM snapshot to clone \[$VIRTUALBOX_BASE_SNAPSHOT\]]' \
    '--virtualbox-disable-snapshots[Disable snapshoting to speedup VM creation \[$VIRTUALBOX_DISABLE_SNAPSHOTS\]]' \
    '--cache-type[Select caching method: s3, to use S3 buckets \[$CACHE_TYPE\]]' \
    '--cache-s3-server-address[A host:port to the used S3-compatible server \[$S3_SERVER_ADDRESS\]]' \
    '--cache-s3-access-key[S3 Access Key \[$S3_ACCESS_KEY\]]' \
    '--cache-s3-secret-key[S3 Secret Key \[$S3_SECRET_KEY\]]' \
    '--cache-s3-bucket-name[Name of the bucket where cache will be stored \[$S3_BUCKET_NAME\]]' \
    '--cache-s3-bucket-location[Name of S3 region \[$S3_BUCKET_LOCATION\]]' \
    '--cache-s3-insecure[Use insecure mode (without https) \[$S3_CACHE_INSECURE\]]' \
    '--machine-idle-nodes[Maximum idle machines \[$MACHINE_IDLE_COUNT\]]' \
    '--machine-idle-time[Minimum time after node can be destroyed \[$MACHINE_IDLE_TIME\]]' \
    '--machine-max-builds[Maximum number of builds processed by machine \[$MACHINE_MAX_BUILDS\]]' \
    '--machine-machine-driver[The driver to use when creating machine \[$MACHINE_DRIVER\]]' \
    '--machine-machine-name[The template for machine name (needs to include %s) \[$MACHINE_NAME\]]' \
    '--machine-machine-options[Additional machine creation options \[$MACHINE_OPTIONS\]]' \
    '--machine-off-peak-periods[Time periods when the scheduler is in the OffPeak mode \[$MACHINE_OFF_PEAK_PERIODS\]]' \
    '--machine-off-peak-idle-count[Maximum idle machines when the scheduler is in the OffPeak mode \[$MACHINE_OFF_PEAK_IDLE_COUNT\]]' \
    '--machine-off-peak-idle-time[Minimum time after machine can be destroyed when the scheduler is in the OffPeak mode \[$MACHINE_OFF_PEAK_IDLE_TIME\]]' \
    '--kubernetes-host[Optional Kubernetes master host URL (auto-discovery attempted if not specified) \[$KUBERNETES_HOST\]]' \
    '--kubernetes-cert-file[Optional Kubernetes master auth certificate \[$KUBERNETES_CERT_FILE\]]:certificate file:_files' \
    '--kubernetes-key-file[Optional Kubernetes master auth private key \[$KUBERNETES_KEY_FILE\]]:key file:_files' \
    '--kubernetes-ca-file[Optional Kubernetes master auth ca certificate \[$KUBERNETES_CA_FILE\]]:ca certificate file:_files' \
    '--kubernetes-image[Default docker image to use for builds when none is specified \[$KUBERNETES_IMAGE\]]' \
    '--kubernetes-namespace[Namespace to run Kubernetes jobs in \[$KUBERNETES_NAMESPACE\]]' \
    '--kubernetes-privileged[Run all containers with the privileged flag enabled \[$KUBERNETES_PRIVILEGED\]]' \
    '--kubernetes-cpus[The CPU allocation given to build containers \[$KUBERNETES_CPUS\]]' \
    '--kubernetes-memory[The amount of memory allocated to build containers \[$KUBERNETES_MEMORY\]]' \
    '--kubernetes-service-cpus[The CPU allocation given to build service containers \[$KUBERNETES_SERVICE_CPUS\]]' \
    '--kubernetes-service-memory[The amount of memory allocated to build service containers \[$KUBERNETES_SERVICE_MEMORY\]]' \
    '--kubernetes-pull-policy[Policy for if/when to pull a container image (never, if-not-present, always). The cluster default will be used if not set \[$KUBERNETES_PULL_POLICY\]]'

}

_gitlab_ci_multi_runner_unregister() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '(-c --config)'{-c,--config}'[config file \[$CONFIG_FILE\]]:config file:_path_files -g "*(/) *.toml"' \
    '(-u --url)'{-u,--url}'[Runner URL \[$CI_SERVER_URL\]]' \
    '(-t --token)'{-t,--token}'[Runner token \[$CI_SERVER_TOKEN\]]' \
    '--tls-ca-file[File containing the certificates to verify the peer when using HTTPS \[$CI_SERVER_TLS_CA_FILE\]]:certificate file:_files' \
    '(-n --name)'{-n,--name}'[Name of the runner you wish to unregister]'
}

_gitlab_ci_multi_runner_verify() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '(-c --config)'{-c,--config}'[config file \[$CONFIG_FILE\]]:config file:_path_files -g "*(/) *.toml"' \
    '--delete[Delete no longer existing runners?]'
}

_gitlab_ci_multi_runner_artifacts-downloader() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '--id[The build ID to upload artifacts for \[$CI_BUILD_ID\]]' \
    '--token[Build token \[$CI_BUILD_TOKEN\]]' \
    '--url[GitLab CI URL \[$CI_SERVER_URL\]]:gitlab ci url:_urls' \
    '--tls-ca-file[File containing the certificates to verify the peer when using HTTPS \[$CI_SERVER_TLS_CA_FILE\]]:certificate file:_files' \
    '--retry[How many times to retry upload]' \
    '--retry-time[How long to wait between retries]'
}

_gitlab_ci_multi_runner_artifacts-uploader() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '--id[The build ID to upload artifacts for \[$CI_BUILD_ID\]]' \
    '--token[Build token \[$CI_BUILD_TOKEN\]]' \
    '--url[GitLab CI URL \[$CI_SERVER_URL\]]:gitlab ci url:_urls' \
    '--tls-ca-file[File containing the certificates to verify the peer when using HTTPS \[$CI_SERVER_TLS_CA_FILE\]]:certificate file:_files' \
    '--retry[How many times to retry upload]' \
    '--retry-time[How long to wait between retries]' \
    '--path[Add paths to archive]' \
    '--untracked[Add git untracked files]' \
    '--verbose[Detailed information]' \
    '--name[The name of the archive]' \
    '--expire-in[When to expire artifacts]'
}

_gitlab_ci_multi_runner_cache-archiver() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '--path[Add paths to archive]' \
    '--untracked[Add git untracked files]' \
    '--verbose[Detailed information]' \
    '--retry[How many times to retry upload]' \
    '--retry-time[How long to wait between retries]' \
    '--file[The path to file]::_files' \
    '--url[Download artifacts instead of uploading them]:artifact url:_urls'
}

_gitlab_ci_multi_runner_cache-extractor() { 
  _arguments -s \
    '(- *)'{--help,-h}'[show help]' \
    '--retry[How many times to retry upload]' \
    '--retry-time[How long to wait between retries]' \
    '--url[Download artifacts instead of uploading them]:artifact url:_urls' \
    '--file[The file containing your cache artifacts]:cache file:_files'
}

_gitlab_ci_multi_runner "$@"
